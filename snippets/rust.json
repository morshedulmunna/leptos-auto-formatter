{
    "Leptos Imports": {
        "prefix": "limports",
        "body": [
            "use leptos::prelude::*;"
        ],
        "description": "Common Leptos imports"
    },
    "Leptos Router Imports": {
        "prefix": "lrouter",
        "body": [
            "use leptos::prelude::*;",
            "use leptos_router::*;"
        ],
        "description": "Leptos with router imports"
    },
    "Leptos Server Imports": {
        "prefix": "lserver_imports",
        "body": [
            "use leptos::prelude::*;",
            "use leptos::server_fn::*;"
        ],
        "description": "Leptos with server function imports"
    },
    "Leptos Full Imports": {
        "prefix": "lfull",
        "body": [
            "use leptos::prelude::*;",
            "use leptos_router::*;",
            "use leptos::server_fn::*;"
        ],
        "description": "Complete Leptos imports with router and server"
    },
    "Leptos Component": {
        "prefix": "lc",
        "body": [
            "use leptos::prelude::*;",
            "",
            "#[component]",
            "pub fn ${1:ComponentName}() -> impl IntoView {",
            "    view! {",
            "        ${2:// Component content}",
            "    }",
            "}"
        ],
        "description": "Create a basic Leptos component"
    },
    "Leptos Component with Props": {
        "prefix": "lcp",
        "body": [
            "use leptos::prelude::*;",
            "",
            "#[component]",
            "pub fn ${1:ComponentName}(props: ${2:Props}) -> impl IntoView {",
            "    view! {",
            "        ${3:// Component content}",
            "    }",
            "}"
        ],
        "description": "Create a Leptos component with props"
    },
    "Leptos Component with Children": {
        "prefix": "lcc",
        "body": [
            "use leptos::prelude::*;",
            "",
            "#[component]",
            "pub fn ${1:ComponentName}(",
            "    children: Children,",
            "    #[prop(optional)] class: Option<&'static str>,",
            ") -> impl IntoView {",
            "    view! {",
            "        <div class=class>",
            "            {children()}",
            "        </div>",
            "    }",
            "}"
        ],
        "description": "Create a Leptos component with children and optional class"
    },
    "Leptos Component with Props and Children": {
        "prefix": "lcpc",
        "body": [
            "use leptos::prelude::*;",
            "",
            "#[derive(Props, PartialEq, Clone)]",
            "pub struct ${1:ComponentName}Props {",
            "    pub children: Children,",
            "    #[prop(optional)]",
            "    pub class: Option<&'static str>,",
            "    #[prop(optional)]",
            "    pub ${2:custom_prop}: Option<${3:String}>,",
            "}",
            "",
            "#[component]",
            "pub fn ${1:ComponentName}(props: ${1:ComponentName}Props) -> impl IntoView {",
            "    view! {",
            "        <div class=props.class>",
            "            {props.children()}",
            "        </div>",
            "    }",
            "}"
        ],
        "description": "Create a Leptos component with props and children"
    },
    "Leptos View": {
        "prefix": "lv",
        "body": [
            "view! {",
            "    ${1:// View content}",
            "}"
        ],
        "description": "Create a Leptos view block"
    },
    "Leptos Signal": {
        "prefix": "ls",
        "body": [
            "let (${1:value}, set_${1:value}) = create_signal(${2:initial_value});"
        ],
        "description": "Create a Leptos signal"
    },
    "Leptos Effect": {
        "prefix": "le",
        "body": [
            "create_effect(move |_| {",
            "    ${1:// Effect logic}",
            "});"
        ],
        "description": "Create a Leptos effect"
    },
    "Leptos Resource": {
        "prefix": "lr",
        "body": [
            "let ${1:resource} = create_resource(",
            "    move || ${2:dependencies},",
            "    move |${3:dep}| async move {",
            "        ${4:// Resource logic}",
            "    }",
            ");"
        ],
        "description": "Create a Leptos resource"
    },
    "Leptos For Loop": {
        "prefix": "lf",
        "body": [
            "For {",
            "    each=${1:items},",
            "    key=${2:key_fn},",
            "    children=|${3:item}| view! {",
            "        ${4:// Item content}",
            "    }",
            "}"
        ],
        "description": "Create a Leptos For loop"
    },
    "Leptos Show": {
        "prefix": "lshow",
        "body": [
            "Show {",
            "    when=${1:condition},",
            "    children=|| view! {",
            "        ${2:// Content to show}",
            "    }",
            "}"
        ],
        "description": "Create a Leptos Show conditional"
    },
    "Leptos Show with Fallback": {
        "prefix": "lshowf",
        "body": [
            "Show {",
            "    when=${1:condition},",
            "    fallback=|| view! { ${3:// Fallback content} },",
            "    children=|| view! {",
            "        ${2:// Content to show}",
            "    }",
            "}"
        ],
        "description": "Create a Leptos Show with fallback"
    },
    "Leptos Suspense": {
        "prefix": "lsuspense",
        "body": [
            "Suspense {",
            "    fallback=|| view! { ${1:// Loading content} },",
            "    children=|| view! {",
            "        ${2:// Suspense content}",
            "    }",
            "}"
        ],
        "description": "Create a Leptos Suspense boundary"
    },
    "Leptos Error Boundary": {
        "prefix": "lerror",
        "body": [
            "ErrorBoundary {",
            "    fallback=|${1:errors}| view! {",
            "        ${2:// Error content}",
            "    },",
            "    children=|| view! {",
            "        ${3:// Content that might error}",
            "    }",
            "}"
        ],
        "description": "Create a Leptos ErrorBoundary"
    },
    "Leptos Router Route": {
        "prefix": "lroute",
        "body": [
            "Route {",
            "    path=\"${1:/path}\",",
            "    view=${2:ComponentName},",
            "}"
        ],
        "description": "Create a Leptos Router route"
    },
    "Leptos Router Routes": {
        "prefix": "lroutes",
        "body": [
            "Routes {",
            "    ${1:// Route definitions}",
            "}"
        ],
        "description": "Create a Leptos Router Routes container"
    },
    "Leptos Link": {
        "prefix": "llink",
        "body": [
            "Link {",
            "    to=\"${1:/path}\",",
            "    \"${2:Link text}\"",
            "}"
        ],
        "description": "Create a Leptos Router Link"
    },
    "Leptos Button": {
        "prefix": "lbtn",
        "body": [
            "button {",
            "    on:click=${1:click_handler},",
            "    \"${2:Button text}\"",
            "}"
        ],
        "description": "Create a Leptos button element"
    },
    "Leptos Input": {
        "prefix": "linput",
        "body": [
            "input {",
            "    type=\"${1:text}\",",
            "    prop:value=${2:value},",
            "    on:input=${3:input_handler},",
            "}"
        ],
        "description": "Create a Leptos input element"
    },
    "Leptos Form": {
        "prefix": "lform",
        "body": [
            "form {",
            "    on:submit=${1:submit_handler},",
            "    ${2:// Form content}",
            "}"
        ],
        "description": "Create a Leptos form element"
    },
    "Leptos Div with Class": {
        "prefix": "ldiv",
        "body": [
            "div {",
            "    class=\"${1:css-class}\",",
            "    ${2:// Div content}",
            "}"
        ],
        "description": "Create a Leptos div with CSS class"
    },
    "Leptos Span": {
        "prefix": "lspan",
        "body": [
            "span {",
            "    \"${1:Text content}\"",
            "}"
        ],
        "description": "Create a Leptos span element"
    },
    "Leptos Paragraph": {
        "prefix": "lp",
        "body": [
            "p {",
            "    \"${1:Paragraph content}\"",
            "}"
        ],
        "description": "Create a Leptos paragraph element"
    },
    "Leptos Heading": {
        "prefix": "lh",
        "body": [
            "h${1:1} {",
            "    \"${2:Heading content}\"",
            "}"
        ],
        "description": "Create a Leptos heading element"
    },
    "Leptos List Item": {
        "prefix": "lli",
        "body": [
            "li {",
            "    \"${1:List item content}\"",
            "}"
        ],
        "description": "Create a Leptos list item element"
    },
    "Leptos Unordered List": {
        "prefix": "lul",
        "body": [
            "ul {",
            "    ${1:// List items}",
            "}"
        ],
        "description": "Create a Leptos unordered list"
    },
    "Leptos Ordered List": {
        "prefix": "lol",
        "body": [
            "ol {",
            "    ${1:// List items}",
            "}"
        ],
        "description": "Create a Leptos ordered list"
    },
    "Leptos Main Function": {
        "prefix": "lmain",
        "body": [
            "#[tokio::main]",
            "async fn main() {",
            "    _ = console_log::init_with_level(log::Level::Debug);",
            "    console_error_panic_hook::set_once();",
            "",
            "    leptos::mount_to_body(|| view! { <${1:App/> });",
            "}"
        ],
        "description": "Create a Leptos main function with basic setup"
    },
    "Leptos App Component": {
        "prefix": "lapp",
        "body": [
            "#[component]",
            "fn App() -> impl IntoView {",
            "    view! {",
            "        <main>",
            "            <h1>\"Welcome to Leptos!\"</h1>",
            "            <p>\"This is a Leptos application.\"</p>",
            "        </main>",
            "    }",
            "}"
        ],
        "description": "Create a basic Leptos App component"
    },
    "Leptos Server Function": {
        "prefix": "lserver",
        "body": [
            "#[server]",
            "pub async fn ${1:function_name}(${2:params}) -> Result<${3:ReturnType}, ServerFnError> {",
            "    ${4:// Server function logic}",
            "    Ok(${5:result})",
            "}"
        ],
        "description": "Create a Leptos server function"
    },
    "Leptos Action": {
        "prefix": "laction",
        "body": [
            "let ${1:action} = create_server_action::<${2:ActionType>>();"
        ],
        "description": "Create a Leptos action"
    },
    "Leptos Multi Action": {
        "prefix": "lmulti",
        "body": [
            "let ${1:action} = create_server_action::<${2:ActionType>>();",
            "let ${3:pending} = ${1:action}.pending();"
        ],
        "description": "Create a Leptos action with pending state"
    },
    "Leptos Memo": {
        "prefix": "lmemo",
        "body": [
            "let ${1:memo} = create_memo(move |_| {",
            "    ${2:// Memo logic}",
            "});"
        ],
        "description": "Create a Leptos memo"
    },
    "Leptos Derived Signal": {
        "prefix": "lderived",
        "body": [
            "let ${1:derived} = create_derived(move |_| {",
            "    ${2:// Derived logic}",
            "});"
        ],
        "description": "Create a Leptos derived signal"
    },
    "Leptos Mount": {
        "prefix": "lmount",
        "body": [
            "leptos::mount_to_body(|| view! { <${1:App/> });"
        ],
        "description": "Mount Leptos app to body"
    },
    "Leptos Hydrate": {
        "prefix": "lhydrate",
        "body": [
            "leptos::hydrate_to_body(|| view! { <${1:App/> });"
        ],
        "description": "Hydrate Leptos app to body"
    },
    "Leptos SSR": {
        "prefix": "lssr",
        "body": [
            "leptos::ssr::render_to_string(|| view! { <${1:App/> })"
        ],
        "description": "Server-side render Leptos app"
    },
    "Leptos Cargo Dependencies": {
        "prefix": "ldeps",
        "body": [
            "[dependencies]",
            "leptos = { version = \"${1:0.6}\", features = [\"csr\"] }",
            "leptos_router = \"${1:0.6}\"",
            "leptos_meta = \"${1:0.6}\"",
            "console_error_panic_hook = \"0.1.7\"",
            "console_log = \"1.0.0\"",
            "wasm-bindgen = \"0.2\""
        ],
        "description": "Common Leptos Cargo dependencies"
    },
    "Leptos Cargo Dependencies SSR": {
        "prefix": "ldeps_ssr",
        "body": [
            "[dependencies]",
            "leptos = { version = \"${1:0.6}\", features = [\"ssr\"] }",
            "leptos_router = \"${1:0.6}\"",
            "leptos_meta = \"${1:0.6}\"",
            "leptos_axum = \"${1:0.6}\"",
            "axum = \"0.7\"",
            "tokio = { version = \"1.0\", features = [\"full\"] }",
            "tracing = \"0.1\"",
            "tracing-subscriber = \"0.3\""
        ],
        "description": "Leptos Cargo dependencies for SSR"
    },
    "Leptos Meta Title": {
        "prefix": "ltitle",
        "body": [
            "Title { \"${1:Page Title}\" }"
        ],
        "description": "Set page title with Leptos Meta"
    },
    "Leptos Meta Description": {
        "prefix": "ldesc",
        "body": [
            "Meta {",
            "    name=\"description\",",
            "    content=\"${1:Page description}\"",
            "}"
        ],
        "description": "Set page description with Leptos Meta"
    },
    "Leptos CSS Link": {
        "prefix": "lcss",
        "body": [
            "Link {",
            "    rel=\"stylesheet\",",
            "    href=\"/${1:styles.css}\"",
            "}"
        ],
        "description": "Link CSS file with Leptos Meta"
    },
    "Leptos Script": {
        "prefix": "lscript",
        "body": [
            "Script {",
            "    src=\"/${1:script.js}\"",
            "}"
        ],
        "description": "Include JavaScript file with Leptos Meta"
    },
    "Leptos Window Event": {
        "prefix": "lwindow",
        "body": [
            "window_event_listener(ev::${1:resize}, move |${2:event}| {",
            "    ${3:// Event handler}",
            "});"
        ],
        "description": "Add window event listener"
    },
    "Leptos Document Event": {
        "prefix": "ldoc",
        "body": [
            "document_event_listener(ev::${1:click}, move |${2:event}| {",
            "    ${3:// Event handler}",
            "});"
        ],
        "description": "Add document event listener"
    },
    "Leptos Interval": {
        "prefix": "linterval",
        "body": [
            "set_interval_with_handle(",
            "    move || {",
            "        ${1:// Interval logic}",
            "    },",
            "    std::time::Duration::from_millis(${2:1000})",
            ")"
        ],
        "description": "Create an interval timer"
    },
    "Leptos Timeout": {
        "prefix": "ltimeout",
        "body": [
            "set_timeout_with_handle(",
            "    move || {",
            "        ${1:// Timeout logic}",
            "    },",
            "    std::time::Duration::from_millis(${2:1000})",
            ")"
        ],
        "description": "Create a timeout"
    },
    "Leptos Local Storage": {
        "prefix": "llocal",
        "body": [
            "let ${1:storage} = leptos::leptos_dom::helpers::local_storage();"
        ],
        "description": "Get local storage handle"
    },
    "Leptos Session Storage": {
        "prefix": "lsession",
        "body": [
            "let ${1:storage} = leptos::leptos_dom::helpers::session_storage();"
        ],
        "description": "Get session storage handle"
    },
    "Leptos Fetch": {
        "prefix": "lfetch",
        "body": [
            "let ${1:data} = create_resource(",
            "    move || (),",
            "    move |_| async move {",
            "        let response = reqwest::get(\"${2:https://api.example.com/data}\").await?;",
            "        let data: ${3:DataType} = response.json().await?;",
            "        Ok::<_, reqwest::Error>(data)",
            "    }",
            ");"
        ],
        "description": "Create a resource with HTTP fetch"
    },
    "Leptos Error Handling": {
        "prefix": "lerror_handle",
        "body": [
            "let ${1:error} = create_rw_signal::<Option<String>>(None);",
            "",
            "let handle_error = move |err: String| {",
            "    ${1:error}.set(Some(err));",
            "};"
        ],
        "description": "Create error handling pattern"
    },
    "Leptos Loading State": {
        "prefix": "lloading",
        "body": [
            "let ${1:loading} = create_rw_signal(false);",
            "",
            "let set_loading = move |is_loading: bool| {",
            "    ${1:loading}.set(is_loading);",
            "};"
        ],
        "description": "Create loading state pattern"
    },
    "Leptos Form State": {
        "prefix": "lform_state",
        "body": [
            "let ${1:form_data} = create_rw_signal(${2:FormData::default()});",
            "let ${3:errors} = create_rw_signal::<Vec<String>>(vec![]);",
            "",
            "let handle_submit = move |ev: leptos::html::SubmitEvent| {",
            "    ev.prevent_default();",
            "    ${4:// Form submission logic}",
            "};"
        ],
        "description": "Create form state management"
    },
    "Leptos Context Provider": {
        "prefix": "lcontext",
        "body": [
            "#[derive(Clone)]",
            "pub struct ${1:ContextData} {",
            "    pub ${2:value}: ReadSignal<${3:String}>,",
            "    pub ${4:set_value}: WriteSignal<${3:String}>,",
            "}",
            "",
            "pub fn provide_${1:ContextData}() {",
            "    let (${2:value}, ${4:set_value}) = create_signal(\"${5:default}\".to_string());",
            "    provide_context(ContextData { ${2:value}, ${4:set_value} });",
            "}"
        ],
        "description": "Create a context provider"
    },
    "Leptos Context Consumer": {
        "prefix": "luse_context",
        "body": [
            "let ${1:context} = use_context::<${2:ContextData>>().expect(\"Context not found\");"
        ],
        "description": "Use context in component"
    },
    "Leptos Debug": {
        "prefix": "ldebug",
        "body": [
            "leptos::logging::log!(\"${1:Debug message}: {:?}\", ${2:value});"
        ],
        "description": "Add debug logging"
    },
    "Leptos Console Log": {
        "prefix": "lconsole",
        "body": [
            "web_sys::console::log_1(&wasm_bindgen::JsValue::from_str(\"${1:Message}\"));"
        ],
        "description": "Console log in browser"
    },
    "Leptos Window Size": {
        "prefix": "lwindow_size",
        "body": [
            "let ${1:window_size} = create_rw_signal((800, 600));",
            "",
            "window_event_listener(ev::resize, move |_| {",
            "    let window = web_sys::window().unwrap();",
            "    let width = window.inner_width().unwrap().as_f64().unwrap() as u32;",
            "    let height = window.inner_height().unwrap().as_f64().unwrap() as u32;",
            "    ${1:window_size}.set((width, height));",
            "});"
        ],
        "description": "Track window size"
    },
    "Leptos URL Hash": {
        "prefix": "lhash",
        "body": [
            "let ${1:hash} = create_rw_signal(web_sys::window()",
            "    .unwrap()",
            "    .location()",
            "    .hash()",
            "    .unwrap_or_default());",
            "",
            "window_event_listener(ev::hashchange, move |_| {",
            "    let new_hash = web_sys::window()",
            "        .unwrap()",
            "        .location()",
            "        .hash()",
            "        .unwrap_or_default();",
            "    ${1:hash}.set(new_hash);",
            "});"
        ],
        "description": "Track URL hash changes"
    },
    "Leptos Local Storage Signal": {
        "prefix": "llocal_signal",
        "body": [
            "let ${1:storage_key} = \"${2:my_key}\";",
            "let ${3:value} = create_rw_signal(",
            "    leptos::leptos_dom::helpers::local_storage()",
            "        .get_item(${1:storage_key})",
            "        .unwrap_or_default()",
            ");",
            "",
            "create_effect(move |_| {",
            "    if let Some(storage) = leptos::leptos_dom::helpers::local_storage() {",
            "        let _ = storage.set_item(${1:storage_key}, &${3:value}.get());",
            "    }",
            "});"
        ],
        "description": "Create signal synced with local storage"
    },
    "Leptos Toggle": {
        "prefix": "ltoggle",
        "body": [
            "let (${1:is_open}, set_${1:is_open}) = create_signal(false);",
            "",
            "let toggle = move |_| {",
            "    set_${1:is_open}.update(|x| *x = !*x);",
            "};"
        ],
        "description": "Create a toggle state"
    },
    "Leptos Counter": {
        "prefix": "lcounter",
        "body": [
            "let (${1:count}, set_${1:count}) = create_signal(0);",
            "",
            "let increment = move |_| {",
            "    set_${1:count}.update(|x| *x += 1);",
            "};",
            "",
            "let decrement = move |_| {",
            "    set_${1:count}.update(|x| *x -= 1);",
            "};"
        ],
        "description": "Create a counter with increment/decrement"
    }
}